/*!
\file
\brief Заголовочный файл с объявлениям класса Model который представляет
собой модель для выполнения математических вычислений.
*/

#ifndef CPP3_SMARTCALC_V2_0_1_SMARTCALC_V2_0_MODEL_H_
#define CPP3_SMARTCALC_V2_0_1_SMARTCALC_V2_0_MODEL_H_

#include <cmath>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>

#define MAXSIZE 255  // Максимально разрешенный размер для ввода пользователем.

/**
 * @brief Пространство имён s21 содержит класс Model для математических
 * вычислений.
 */
namespace s21 {

/**
 * @brief Класс Model представляет собой модель для выполнения математических
 * вычислений.
 *
 * Этот класс содержит функции для обработки математических выражений, проверки
 * корректности ввода и выполнения вычислений. Он также имеет приватное поле для
 * хранения результата вычислений.
 */
class Model {
 public:
  /**
   * @brief Конструктор класса Model.
   *
   * Конструктор инициализирует приватное поле `data` значением 0.
   */
  inline Model() noexcept { data = 0; };

  /**
   * @brief Выполняет вычисление математического выражения.
   *
   * Эта функция принимает на вход строку с математическим выражением в
   * постфиксной записи и значение константы x. Она выполняет вычисления и
   * сохраняет результат в приватное поле `data`.
   *
   * @param input Строка с математическим выражением в постфиксной записи.
   * @param x Значение константы x.
   */
  void resultModel(std::string input, double x) noexcept;

  /**
   * @brief Проверяет корректность ввода математического выражения.
   *
   * Эта функция принимает на вход строку с математическим выражением и
   * выполняет проверку на корректность ввода. Возвращает `true`, если ввод
   * корректен, и `false` в противном случае.
   *
   * @param input Строка с математическим выражением.
   * @return `true`, если ввод корректен, и `false` в противном случае.
   */
  bool checkInputCorrect(const std::string input) noexcept;

  /**
   * @brief Возвращает результат вычислений.
   *
   * Эта функция возвращает значение результата вычислений, сохраненное в
   * приватном поле `data`.
   *
   * @return Значение результата вычислений.
   */
  inline double getData() const noexcept { return data; }

  /**
   * @brief Проверяет строку на корректное представление числа.
   *
   * Данная функция проверяет, представляет ли входная строка корректное число.
   * Считается, что строка представляет число, если:
   * - Все символы в строке являются цифрами или одной точкой ('.').
   * - Строка не начинается и не заканчивается точкой.
   * - Строка не содержит подряд идущих точек.
   *
   * @param input Входная строка для проверки.
   * @return true, если входная строка представляет корректное число, в
   * противном случае false.
   */
  bool validator(std::string) const noexcept;

 private:
  double data; /**< Результат вычислений. */

  /**
   * @brief Преобразует многосимвольные лексемы в строке.
   *
   * Эта функция принимает на вход строку с математическим выражением и значение
   * константы x. Она выполняет преобразование многосимвольных лексем (например,
   * sin) в соответствующие символы (например, s) и возвращает преобразованное
   * выражение.
   *
   * @param input Строка с математическим выражением.
   * @param x Значение константы x.
   * @return Преобразованное выражение.
   */
  std::string convertLexToSym(std::string input, double x) noexcept;

  /**
   * @brief Преобразует выражение в постфиксной записи.
   *
   * Эта функция принимает на вход строку с математическим выражением и
   * выполняет преобразование выражения в постфиксную запись. Возвращает строку
   * с постфиксным выражением.
   *
   * @param input Строка с математическим выражением.
   * @return Строка с постфиксным выражением.
   */
  std::string reverseNotation(std::string input) noexcept;

  /**
   * @brief Проверяет, является ли символ оператором.
   *
   * Эта функция принимает на вход символ и выполняет проверку, является ли он
   * оператором. Возвращает `true`, если символ - оператор, и `false` в
   * противном случае.
   *
   * @param ch Символ для проверки.
   * @return `true`, если символ - оператор, и `false` в противном случае.
   */
  inline bool isOperator(char ch) const noexcept {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^' ||
           ch == '%';
  }
  inline bool isUnaryOperator(char ch) const noexcept {
    return ch == 's' || ch == 'c' || ch == 't' || ch == 'S' || ch == 'C' ||
           ch == 'T' || ch == 'q' || ch == 'g' || ch == 'l';
  }
};
}  // namespace s21
#endif  // CPP3_SMARTCALC_V2_0_1_SMARTCALC_V2_0_MODEL_H_
